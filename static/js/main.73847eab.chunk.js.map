{"version":3,"sources":["components/TodoForm/TodoForm.js","components/TodoItem/TodoItemMobileButton/TodoItemMobileButton.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoStats/TodoStats.js","components/GlobalTodoActions/GlobalTodoActions.js","components/TodoTable/TodoTable.js","App.js","index.js"],"names":["TodoForm","_this$props","this","props","todoFormValue","handleTodoInput","handleTodoSubmit","todoFormError","todoFormErrorStyle","classNames","ui segment errorSegment","hasError","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","onClick","Component","TodoItemMobileButton","mobileButtonStyle","ui labeled icon button fluid","mobileButtonLight","isComplete","mobileButtonCompleteIcon","icon","check","undo","buttonText","TodoItem","state","updateTodoInput","EditTodoInputChange","event","_this","setState","target","completedAt","editForm","_this2","todoItemStyle","todoItem row","complete","todoItemTextStyle","todoBody","completed","todoItemCompleteIcon","check circle icon outline fitted large todoActionIconGreen","undo alternate circle icon inverted fitted large","todoItemRemoveIcon","times circle icon outline fitted large todoActionIconGreen","times circle inverted icon outline fitted large","todoItemCreatedAtStyle","todoItemCreatedAt","todoItemCreatedAt completed","isEditable","handleUpdateTodo","id","style","color","todoItemContent","handleEditTodo","createdAt","renderCompletedAt","alt","cursor","handleCompleteTodo","handleRemoveTodo","TodoItem_TodoItemMobileButton_TodoItemMobileButton","TodoList","todosArray","todos","map","todo","CSSTransition","key","timeout","appear","components_TodoItem_TodoItem","todoContent","TransitionGroup","component","TodoStats","openTodoLabel","completeTodoLabel","openTodos","filter","length","completedTodos","incompleteTodos","GlobalTodoActions","_ref","handleRemoveAllTodos","handleCompleteAllTodos","TodoTable","preventDefault","currentTimestamp","moment","format","newTodo","concat","Object","toConsumableArray","toast","hideProgressBar","closeOnClick","autoClose","filteredTodosArray","todoIndex","findIndex","objectSpread","currentTodos","newTodoContent","todoListAreaContent","react","components_GlobalTodoActions_GlobalTodoActions","components_TodoStats_TodoStats","components_TodoList_TodoList","textAlign","fontWeight","components_TodoForm_TodoForm","react_toastify","App","components_TodoTable_TodoTable","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.73847eab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nimport \"./style.css\";\n\nclass TodoForm extends Component {\n  render() {\n    const {\n      todoFormValue,\n      handleTodoInput,\n      handleTodoSubmit,\n      todoFormError\n    } = this.props;\n    let todoFormErrorStyle = classNames({\n      \"ui segment errorSegment\": true,\n      hasError: todoFormError\n    });\n    return (\n      <div className=\"ui segment todoForm\">\n        <form className=\"ui form\" onSubmit={handleTodoSubmit}>\n          <div className=\"field\">\n            <input\n              type=\"text\"\n              placeholder=\"What do you need to get done?\"\n              value={todoFormValue}\n              onChange={handleTodoInput}\n            />\n          </div>\n          <div className={todoFormErrorStyle}>\n            <i className=\"icon exclamation circle\" /> {todoFormError}\n          </div>\n          <button\n            className=\"ui button fluid submitTodoButton\"\n            onClick={handleTodoSubmit}\n          >\n            Add Todo\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nTodoForm.propTypes = {\n  todoFormValue: PropTypes.string,\n  todoFormError: PropTypes.string,\n  handleTodoInput: PropTypes.func.isRequired,\n  handleTodoSubmit: PropTypes.func.isRequired\n};\n\nexport default TodoForm;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport \"./style.css\";\n\nconst TodoItemMobileButton = props => {\n  let mobileButtonStyle = classNames({\n    \"ui labeled icon button fluid\": true,\n    mobileButtonLight: props.isComplete\n  });\n\n  let mobileButtonCompleteIcon = classNames({\n    icon: true,\n    check: !props.isComplete,\n    undo: props.isComplete\n  });\n\n  return (\n    <div className=\"eight wide column center aligned mobile only mobileButtonColumn\">\n      <button className={mobileButtonStyle} onClick={props.onClick}>\n        <i className={mobileButtonCompleteIcon} />\n        {props.buttonText}\n      </button>\n    </div>\n  );\n};\n\nexport default TodoItemMobileButton;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport TodoItemMobileButton from \"./TodoItemMobileButton/TodoItemMobileButton\";\n\nimport \"./style.css\";\n\nclass TodoItem extends Component {\n  state = {\n    updateTodoInput: \"\"\n  };\n\n  EditTodoInputChange = event => {\n    this.setState({\n      updateTodoInput: event.target.value\n    });\n  };\n\n  renderCompletedAt() {\n    if (this.props.isComplete) {\n      return (\n        <p className=\"todoItemCompletedAt\">\n          Completed at: {this.props.completedAt}\n        </p>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    let todoItemStyle = classNames({\n      \"todoItem row\": true,\n      complete: this.props.isComplete\n    });\n\n    let todoItemTextStyle = classNames({\n      todoBody: true,\n      completed: this.props.isComplete\n    });\n\n    let todoItemCompleteIcon = classNames({\n      \"check circle icon outline fitted large todoActionIconGreen\": !this.props\n        .isComplete,\n      \"undo alternate circle icon inverted fitted large\": this.props.isComplete\n    });\n\n    let todoItemRemoveIcon = classNames({\n      \"times circle icon outline fitted large todoActionIconGreen\": !this.props\n        .isComplete,\n      \"times circle inverted icon outline fitted large\": this.props.isComplete\n    });\n\n    let todoItemCreatedAtStyle = classNames({\n      todoItemCreatedAt: true,\n      \"todoItemCreatedAt completed\": this.props.isComplete\n    });\n\n    const isEditable = this.props.isEditable;\n    let editForm;\n\n    if (isEditable) {\n      editForm = (\n        <form\n          className=\"ui form todoEditInput\"\n          onSubmit={event =>\n            this.props.handleUpdateTodo(\n              event,\n              this.state.updateTodoInput,\n              this.props.id\n            )\n          }\n        >\n          <div className=\"field\">\n            <label\n              style={\n                this.props.isComplete ? { color: \"#fff\" } : { color: \"#00403a\" }\n              }\n            />\n            <input\n              type=\"text\"\n              value={this.state.updateTodoInput}\n              placeholder={this.props.todoItemContent}\n              onChange={this.EditTodoInputChange}\n              className=\"todoEditInputArea\"\n            />\n          </div>\n          <button\n            className=\"mini ui button updateTodo\"\n            onClick={event =>\n              this.props.handleUpdateTodo(\n                event,\n                this.state.updateTodoInput,\n                this.props.id\n              )\n            }\n          >\n            Update\n          </button>\n        </form>\n      );\n    }\n\n    return (\n      <div className={todoItemStyle}>\n        <div className=\"twelve wide column\">\n          <div className=\"todoContent\">\n            <div className=\"todoBody\">\n              <span className={todoItemTextStyle}>\n                {this.props.todoItemContent}\n              </span>\n              <span\n                className=\"editTodo\"\n                onClick={event =>\n                  this.props.handleEditTodo(event, this.props.id)\n                }\n              >\n                <i\n                  className=\"pencil alternate icon small left floated\"\n                  style={\n                    this.props.isComplete ? { color: \"#fff\" } : { color: \"\" }\n                  }\n                />\n              </span>\n            </div>\n            {isEditable ? editForm : null}\n            <p className={todoItemCreatedAtStyle}>\n              Created on: {this.props.createdAt}\n            </p>\n            {this.renderCompletedAt()}\n          </div>\n        </div>\n        <div className=\"four wide column right aligned large screen computer tablet only\">\n          <div className=\"todoActions\">\n            <div className=\"right floated content\">\n              <span className=\"todoActionButtonWrapper\">\n                <i\n                  className={todoItemCompleteIcon}\n                  alt=\"Mark Todo Complete\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={event =>\n                    this.props.handleCompleteTodo(event, this.props.id)\n                  }\n                />\n              </span>\n              <span className=\"todoActionButtonWrapper\">\n                <i\n                  className={todoItemRemoveIcon}\n                  alt=\"Remove Todo\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={event =>\n                    this.props.handleRemoveTodo(event, this.props.id)\n                  }\n                />\n              </span>\n            </div>\n          </div>\n        </div>\n        <TodoItemMobileButton\n          isComplete={this.props.isComplete}\n          handleCompleteTodo={this.props.handleCompleteTodo}\n          id={this.props.id}\n          buttonText={this.props.isComplete ? \"Undo\" : \"Complete\"}\n          onClick={event => this.props.handleCompleteTodo(event, this.props.id)}\n        />\n        <TodoItemMobileButton\n          isComplete={this.props.isComplete}\n          handleRemoveTodo={this.props.handleRemoveTodo}\n          id={this.props.id}\n          onClick={event => this.props.handleRemoveTodo(event, this.props.id)}\n          buttonText=\"Remove\"\n        />\n      </div>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  isComplete: PropTypes.bool.isRequired,\n  todoItemContent: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  completedAt: PropTypes.string,\n  handleCompleteTodo: PropTypes.func.isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired\n};\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport TodoItem from \"../TodoItem/TodoItem\";\n\nimport \"./style.css\";\n\nclass TodoList extends Component {\n  render() {\n    const todosArray = this.props.todos.map(todo => {\n      return (\n        <CSSTransition\n          key={todo.id}\n          timeout={300}\n          classNames=\"item\"\n          appear={false}\n        >\n          <TodoItem\n            key={todo.id}\n            id={todo.id}\n            todoItemContent={todo.todoContent}\n            isComplete={todo.isComplete}\n            createdAt={todo.createdAt}\n            completedAt={todo.completedAt}\n            isEditable={todo.isEditable}\n            handleCompleteTodo={this.props.handleCompleteTodo}\n            handleRemoveTodo={this.props.handleRemoveTodo}\n            handleEditTodo={this.props.handleEditTodo}\n            handleUpdateTodo={this.props.handleUpdateTodo}\n          />\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <div className=\"ui container grid\">\n        <TransitionGroup component={null}>{todosArray}</TransitionGroup>\n      </div>\n    );\n  }\n}\n\n// const TodoList = ({ todos, handleRemoveTodo, handleCompleteTodo }) => {\n//   return (\n//     <div className=\"ui container grid\">\n//       <TransitionGroup component={null}>\n//         {todos.map(todo => (\n//           <CSSTransition key={todo.id} timeout={300} classNames=\"item\">\n//             <TodoItem\n//               key={todo.id}\n//               id={todo.id}\n//               todoItemContent={todo.todoContent}\n//               isComplete={todo.isComplete}\n//               createdAt={todo.createdAt}\n//               completedAt={todo.completedAt}\n//               handleRemoveTodo={handleRemoveTodo}\n//               handleCompleteTodo={handleCompleteTodo}\n//             />\n//           </CSSTransition>\n//         ))}\n//       </TransitionGroup>\n//     </div>\n//   );\n// };\n\nTodoList.propTypes = {\n  todos: PropTypes.array,\n  id: PropTypes.number,\n  todoContent: PropTypes.string,\n  isComplete: PropTypes.bool,\n  createdAt: PropTypes.string\n};\n\nexport default TodoList;\n","import React from \"react\";\n\nimport \"./style.css\";\n\nconst TodoStats = props => {\n  const openTodos = props.todos.filter(todo => todo.isComplete !== true).length;\n\n  const completedTodos = props.todos.filter(todo => todo.isComplete === true)\n    .length;\n\n  const incompleteTodos = props.todos.filter(todo => todo.isComplete !== true)\n    .length;\n\n  let openTodoLabel;\n  if (incompleteTodos === 0) {\n    openTodoLabel = \"Todos\";\n  } else if (incompleteTodos === 1) {\n    openTodoLabel = \"Todo\";\n  } else {\n    openTodoLabel = \"Todos\";\n  }\n\n  let completeTodoLabel;\n  if (completedTodos === 0) {\n    completeTodoLabel = \"Todos\";\n  } else if (completedTodos === 1) {\n    completeTodoLabel = \"Todo\";\n  } else {\n    completeTodoLabel = \"Todos\";\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"todoStatContainer eight wide column\">\n        <h3 className=\"todoStat\"> {openTodos} </h3>\n        <p className=\"todoStatLabel\">Incomplete {openTodoLabel}</p>\n      </div>\n      <div className=\"todoStatContainer eight wide column\">\n        <h3 className=\"todoStat\">{completedTodos < 1 ? 0 : completedTodos}</h3>\n        <p className=\"todoStatLabel\">Complete {completeTodoLabel}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoStats;\n","import React from \"react\";\n\nconst GlobalTodoActions = ({\n  handleRemoveAllTodos,\n  handleCompleteAllTodos\n}) => {\n  return (\n    <div className=\"row\">\n      <div className=\"eight wide column center aligned\">\n        <button\n          onClick={handleCompleteAllTodos}\n          className=\"ui button small fluid inverted\"\n        >\n          Mark All Complete\n        </button>\n      </div>\n      <div className=\"eight wide column center aligned\">\n        <button\n          onClick={handleRemoveAllTodos}\n          className=\"ui button small fluid inverted\"\n        >\n          Remove All\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalTodoActions;\n","import React, { Component, Fragment } from \"react\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport moment from \"moment\";\n\nimport TodoForm from \"../TodoForm/TodoForm\";\nimport TodoList from \"../TodoList/TodoList\";\nimport TodoStats from \"../TodoStats/TodoStats\";\nimport GlobalTodoActions from \"../GlobalTodoActions/GlobalTodoActions\";\n\nimport \"./TodoTable.css\";\n\nclass TodoTable extends Component {\n  state = {\n    todoFormValue: \"\",\n    todos: [],\n    todoFormError: \"\"\n  };\n\n  handleTodoInput = event => {\n    // Check that current input value is more than 3 characters. If so, set todoFormError to ''\n    if (this.state.todoFormValue.length >= 3) {\n      this.setState({\n        todoFormError: \"\"\n      });\n    }\n    this.setState({\n      todoFormValue: event.target.value\n    });\n  };\n\n  handleTodoSubmit = event => {\n    event.preventDefault();\n    // Check if todoFormValue is empty or less than 3 characters\n    if (\n      this.state.todoFormValue === \"\" ||\n      this.state.todoFormValue.length < 3\n    ) {\n      // If it is, setState of todoFormError to display in TodoForm component\n      this.setState({\n        todoFormError: \"Please enter a Todo with more than 3 characters\"\n      });\n    } else {\n      // Get timestamp for when the todo was created\n      const currentTimestamp = moment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n\n      // Create new Todo object\n      const newTodo = {\n        todoContent: this.state.todoFormValue,\n        id: this.state.todos.length + 1,\n        isComplete: false,\n        createdAt: currentTimestamp,\n        completedAt: \"\",\n        isEditable: false\n      };\n\n      // Use spread operator to copy the current state and update the todos array with the newTodo object\n      this.setState(\n        {\n          todos: [...this.state.todos, newTodo],\n          // Clear form value after submitting\n          todoFormValue: \"\"\n        },\n        () => {\n          // Execute toast notification upon successful state update\n          toast(\"Todo added!\", {\n            type: \"success\",\n            hideProgressBar: true,\n            closeOnClick: true,\n            autoClose: 2000,\n            className: \"toastClass\"\n          });\n        }\n      );\n    }\n  };\n\n  handleRemoveTodo = (event, id) => {\n    // Remove the selected todo from a copy of the todos array using filter\n    // Make a copy of the current state\n    let todosArray = [...this.state.todos];\n\n    // Store result of .filter\n    let filteredTodosArray = todosArray.filter(todo => todo.id !== id);\n\n    // Set the todos state with the filtered array\n    this.setState({\n      todos: filteredTodosArray\n    });\n  };\n\n  handleCompleteTodo = (event, id) => {\n    event.preventDefault();\n    // Get current timestamp\n    const currentTimestamp = moment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n\n    // Get copy of current state\n    let todosArray = [...this.state.todos];\n\n    // Need to find the index of the todo that was clicked from the array of todos.\n    let todoIndex = todosArray.findIndex(todo => todo.id === id);\n\n    // Set the value of the isComplete property of the selected todo to the opposite of its current value in state.\n    todosArray[todoIndex].isComplete = !this.state.todos[todoIndex].isComplete;\n\n    // Check if currently selected todo has a completedAt value\n    if (todosArray[todoIndex].completedAt !== \"\") {\n      // Set the completedAt property of the selected todo\n      todosArray[todoIndex].completedAt = \"\";\n      this.setState({\n        todos: todosArray\n      });\n    } else {\n      todosArray[todoIndex].completedAt = currentTimestamp;\n      // Update the state with the new todosArray\n      this.setState({\n        todos: todosArray\n      });\n    }\n  };\n\n  handleRemoveAllTodos = event => {\n    this.setState({\n      todos: []\n    });\n  };\n\n  handleCompleteAllTodos = event => {\n    // Map through current todos and return an array with all todo.isComoplete: true and update the completedAt timestamp.\n    // This solution uses the spread syntax to copy the current todo and spread the isComplete: true and completedAt properties into the new todo\n\n    // Get current timestamp\n    const currentTimestamp = moment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n\n    const completedTodos = this.state.todos.map(todo => ({\n      ...todo,\n      isComplete: true,\n      completedAt: currentTimestamp\n    }));\n    this.setState({\n      todos: completedTodos\n    });\n  };\n\n  handleEditTodo = (event, id) => {\n    // Find the todo in the todos array using the id passed in from event handler\n    const currentTodos = [...this.state.todos];\n    const todoIndex = currentTodos.findIndex(todo => todo.id === id);\n\n    // Toggle the todo's editable state\n    currentTodos[todoIndex].isEditable = !this.state.todos[todoIndex]\n      .isEditable;\n\n    this.setState({\n      todos: currentTodos\n    });\n  };\n\n  handleUpdateTodo = (event, newTodoContent, id) => {\n    event.preventDefault();\n\n    // Make a copy of the current todos array from state\n    const currentTodos = [...this.state.todos];\n\n    // Find the index of the todo that will be updated\n    const todoIndex = currentTodos.findIndex(todo => todo.id === id);\n\n    // Update the todo's content with the new content from the form\n    currentTodos[todoIndex].todoContent = newTodoContent;\n\n    // Set the updated todo's editable status to false\n    currentTodos[todoIndex].isEditable = false;\n\n    this.setState({\n      todos: currentTodos\n    });\n  };\n\n  render() {\n    let currentTodoCount = this.state.todos.length;\n    let todoListAreaContent;\n\n    if (currentTodoCount !== 0) {\n      todoListAreaContent = (\n        <Fragment>\n          <div className=\"row\">\n            <div className=\"six wide column\">\n              <div className=\"ui grid\">\n                <GlobalTodoActions\n                  handleRemoveAllTodos={this.handleRemoveAllTodos}\n                  handleCompleteAllTodos={this.handleCompleteAllTodos}\n                />\n                <TodoStats todos={this.state.todos} />\n              </div>\n            </div>\n            <div className=\"ten wide column\">\n              <TodoList\n                todos={this.state.todos}\n                handleRemoveTodo={this.handleRemoveTodo}\n                handleCompleteTodo={this.handleCompleteTodo}\n                handleEditTodo={this.handleEditTodo}\n                handleUpdateTodo={this.handleUpdateTodo}\n              />\n            </div>\n          </div>\n        </Fragment>\n      );\n    } else {\n      todoListAreaContent = (\n        <div className=\"row\">\n          <div className=\"column\">\n            <p style={{ color: \"#fff\", textAlign: \"center\", fontWeight: 100 }}>\n              No todos yet...\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"ui grid container stackable\">\n        <div className=\"appHeadline\">\n          <h2>Todoify</h2>\n          <p>Get stuff done. Get on with your life.</p>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"column\">\n            <TodoForm\n              todoFormValue={this.state.todoFormValue}\n              handleTodoInput={this.handleTodoInput}\n              handleTodoSubmit={this.handleTodoSubmit}\n              todoFormError={this.state.todoFormError}\n            />\n          </div>\n        </div>\n        {todoListAreaContent}\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default TodoTable;\n","import React from \"react\";\n\nimport TodoTable from \"./components/TodoTable/TodoTable\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"app2\">\n      <TodoTable />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}